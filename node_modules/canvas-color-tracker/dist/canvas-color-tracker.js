// Version 1.0.1 canvas-color-tracker - https://github.com/vasturiano/canvas-color-tracker
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.ColorTracker = factory());
}(this, (function () { 'use strict';

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var ENTROPY = 123; // Raise numbers to prevent collisions in lower indexes

  var int2HexColor = function int2HexColor(num) {
    return '#' + Math.min(num, Math.pow(2, 24)).toString(16).padStart(6, '0');
  };
  var rgb2Int = function rgb2Int(r, g, b) {
    return (r << 16) + (g << 8) + b;
  };

  var checksum = function checksum(n, csBits) {
    return n * ENTROPY % Math.pow(2, csBits);
  };

  var _class = function () {
    function _class() {
      var csBits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;

      _classCallCheck(this, _class);

      this.csBits = csBits; // How many bits to reserve for checksum. Will eat away into the usable size of the registry.
      this.registry = ['__reserved for background__']; // indexed objects for rgb lookup;
    }

    _createClass(_class, [{
      key: 'register',
      value: function register(obj) {
        if (this.registry.length >= Math.pow(2, 24 - this.csBits)) {
          // color has 24 bits (-checksum)
          return null; // Registry is full
        }

        var idx = this.registry.length;
        var cs = checksum(idx, this.csBits);

        var color = int2HexColor(idx + (cs << 24 - this.csBits));

        this.registry.push(obj);
        return color;
      }
    }, {
      key: 'lookup',
      value: function lookup(_ref) {
        var _ref2 = _slicedToArray(_ref, 3),
            r = _ref2[0],
            g = _ref2[1],
            b = _ref2[2];

        var n = rgb2Int(r, g, b);

        if (!n) return null; // 0 index is reserved for background

        var idx = n & Math.pow(2, 24 - this.csBits) - 1; // registry index
        var cs = n >> 24 - this.csBits & Math.pow(2, this.csBits) - 1; // extract bits reserved for checksum

        if (checksum(idx, this.csBits) !== cs || idx >= this.registry.length) return null; // failed checksum or registry out of bounds

        return this.registry[idx];
      }
    }]);

    return _class;
  }();

  return _class;

})));
//# sourceMappingURL=canvas-color-tracker.js.map
